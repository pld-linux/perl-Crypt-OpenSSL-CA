diff -ruNp Crypt-OpenSSL-CA-0.24.orig/lib/Crypt/OpenSSL/CA.pm Crypt-OpenSSL-CA-0.24/lib/Crypt/OpenSSL/CA.pm
--- Crypt-OpenSSL-CA-0.24.orig/lib/Crypt/OpenSSL/CA.pm	2016-01-03 21:29:16.000000000 +0100
+++ Crypt-OpenSSL-CA-0.24/lib/Crypt/OpenSSL/CA.pm	2018-11-16 15:29:35.096214322 +0100
@@ -499,13 +499,13 @@ SV* to_PEM(SV* sv_self) {
     if (! (mem = BIO_new(BIO_s_mem()))) {
         croak("Cannot allocate BIO");
     }
-    if (self->type == EVP_PKEY_RSA) {
-        printstatus = PEM_write_bio_RSA_PUBKEY(mem, self->pkey.rsa);
-    } else if (self->type == EVP_PKEY_DSA) {
-        printstatus = PEM_write_bio_DSA_PUBKEY(mem, self->pkey.dsa);
+    if (EVP_PKEY_id(self) == EVP_PKEY_RSA) {
+        printstatus = PEM_write_bio_RSA_PUBKEY(mem, EVP_PKEY_get0_RSA(self));
+    } else if (EVP_PKEY_id(self) == EVP_PKEY_DSA) {
+        printstatus = PEM_write_bio_DSA_PUBKEY(mem, EVP_PKEY_get0_DSA(self));
     } else {
         BIO_free(mem);
-        croak("Unknown public key type %d", self->type);
+        croak("Unknown public key type %d", EVP_PKEY_id(self));
     }
     printstatus = printstatus && ( BIO_write(mem, "\\0", 1) > 0 );
     if (! printstatus) {
@@ -540,13 +540,13 @@ SV* get_modulus(SV* sv_self) {
         croak("Cannot allocate BIO");
     }
 
-    if (self->type == EVP_PKEY_RSA) {
-            printstatus = BN_print(mem,self->pkey.rsa->n);
-    } else if (self->type == EVP_PKEY_DSA) {
-            printstatus = BN_print(mem,self->pkey.rsa->n);
+    if (EVP_PKEY_id(self) == EVP_PKEY_RSA) {
+            printstatus = BN_print(mem,RSA_get0_n(EVP_PKEY_get0_RSA(self)));
+    } else if (EVP_PKEY_id(self) == EVP_PKEY_DSA) {
+            printstatus = BN_print(mem,DSA_get0_p(EVP_PKEY_get0_DSA(self)));
     } else {
             BIO_free(mem);
-            croak("Unknown public key type %d", self->type);
+            croak("Unknown public key type %d", EVP_PKEY_id(self));
     }
 
     printstatus = printstatus && ( BIO_write(mem, "\\0", 1) > 0 );
@@ -1263,7 +1263,7 @@ SV* new_freshestCRL(char* class, char* v
     self = X509V3_EXT_nconf_nid
              (config, &ctx, NID_crl_distribution_points, value);
     if (!self) { sslcroak("X509V3_EXT_conf_nid failed"); }
-    self->object = OBJ_nid2obj(nid_freshest_crl);
+    X509_EXTENSION_set_object(self, OBJ_nid2obj(nid_freshest_crl));
     return perl_wrap("${\__PACKAGE__}", self);
 }
 
